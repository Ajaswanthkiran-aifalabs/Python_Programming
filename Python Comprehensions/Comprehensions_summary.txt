
comprehension
-------------
- Comprehension in python provides a concise and expressive way of creating a list,dictionary and set. There allows to create this data 
    structures in a single line of code.

- There are four types of comprehensions in python
        - list
            Syntax:   lst=[<output_expression> for <item> in <iterable> if <condition> ]
        - Set
            Syntax: s={ <output_expression> for <item> in <iterable> if <condition>}
        - dictionary
            Syntax:  dt={ key:value for (key,value) in iterable if <condition> }
        - Generator:- It is very similar to the list but the only diff is it used circular brackets and major diff is it does not 
                    allocate memory for the whole list. instead there generate each value one by one. 
            Syntax: gen=( <expression> for <item> in <iterable> if <condition>)

enumerate()
-----------
- When we are iterating over an iterator we want to keep track of the iteration count For ease this python provides the a built-in function
enumerate().
- The enumerate() add a counter to an iterable and return it in the form of an enumerating object.
    syntax:  enumerate(iterable,start=0)
        iterable: any object that supports iteration
        start: the index value from which the counter variable should be started.
    - the start parameter is a optional if we wont provide that then it will display a tuple (start,item).

zip() 
----
- The zip function is used to combine two or more list into a single iterable, where the elements from the corresponding positions are
paired together. 

- It consider only the shortest number of elements in the both the list.
        syntax:   zip(*iterator)

        ex: for i,j in zip(lst1,lst2):
                print(i,j)
              

zip_longest()
-------------
- It is similar to zip but in zip it consider the shortest list length. where as here it consider the longest 
list length.

    ex:  lst1=[1,2,3,4,5,5]
         lst2=[5,34,4,3,3,4,5]

         for i,j in zip(lst1,lst2):
                print(i,j) --> output   1 5, 2 34,3 4,4 3,5 3,5 4, None 5
            - it assign a default None value if the other list has no value.

all()
----
- this a function return true if all the elements in the iterable are true. if one elements is false then it return false.

if all(lst):
    print("True")
else:
    print("False")

any()
----
- if any of the element in the list is true then it will return true. if all are false then return false.

if any(lst):
    print("true")
else:
    print("false")
    
